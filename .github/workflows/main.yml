# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  docker:
    runs-on: ubuntu-latest
    environment:
      name: env
    steps:
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          file: /server/dockerfile
          tags: austinabro321/node_greeting
      -
        name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment:
      name: env

    env:
      AWS_REGION: us-east-2
      EKS_CLUSTER_NAME: node_test

    steps:
    - name: Checkout
      uses: actions/checkout@v1

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # - name: provision cluster
    #   id: provision_cluster
    #   run: |
    #     curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
    #     sudo mv /tmp/eksctl /usr/local/bin
    #     eksctl create cluster --name $EKS_CLUSTER_NAME --region us-east-2 \
    #     --nodegroup-name linux-nodes --node-type t2.micro --nodes 2 && echo "creating cluster" || echo  "cluster already exists"

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: example-eks
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to EKS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./server/.
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    - name: Setup kubeconfig
      id: setup-kubeconfig
      run: |
        aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER_NAME
    - name: Deploy k8s yaml
      id: deploy-k8s-yaml
      env:
        K8S_YAML_DIR: ./eks-k8s 
        IMAGE_NAME: ${{ steps.build-image.outputs.image }}
      run: |                
        curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
        sudo mv /tmp/eksctl /usr/local/bin
        eksctl create cluster --name $EKS_CLUSTER_NAME --region us-east-2 \
        --nodegroup-name linux-nodes --node-type t2.micro --nodes 2 && echo "creating cluster" || echo  "cluster already exists"
        kubectl apply -f $K8S_YAML_DIR/svc-load-balancer.yml
        kubectl apply -f $K8S_YAML_DIR/deploy.yml
        kubectl set image deployments.apps/greeting myapp=$IMAGE_NAME
        kubectl get services -o wide
        kubectl get pods